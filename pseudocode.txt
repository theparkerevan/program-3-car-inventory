int menu()
void searchInventory()
void updateInventory()
void printInventory()
void carLoan()



struct Car
{
    name
    state
    price
    quantity
    mpg
    rating

    void printSelf()
    {
        print self for viewing and testing purpose.
    }
}



struct Profile
{
    name
    state
    preference

    createProfile()
    {
        User inputs name, state, preference based on prompts
    }

    viewProfile()
    {
        *******************************
        Name: self.name
        State: self.state
        Preference: self.preference
    }

    updateProfile()
    {
        *******************************
        Update Name.............press 0
        Update State............press 1
        Update Preference.......press 2

        if choice == 0
            update name
        if choice == 1
            update state
        if choice == 2
            update preference
    }
}



main
{
    ifstream inven_raw("inventory.txt");
    
    string raw_name;
    string raw_state;
    int raw_price;
    int raw_quantity;
    int raw_mpg;
    char raw_rating;

    Car inventory[];

    This while loop runs once for each line in the inventory file.
    while(inven_raw >> all raw variables in order)
    {
        Create Car instance inside of inventory[i]
        Then assign each raw variable to inventory[i].variable;
        i++
    }


    while program_is_running and iterations < 10,000 or something:
        switch(menu())
        {   
            case 0: Create Profile
                    user = Profile
            case 1: View Profile
                    user.viewProfile()
            case 2: Update Profile
                    user.updateProfile()
            case 3: Search Inventory
            case 4: Update Inventory
            case 5: Print Inventory
            case 6: Car Loan
            case 7: Exit
            Defualt: 
        }
}


int menu()
{
    *******************************
             CSC INVENTORY
    *******************************
    Create Profile..........press 0
    View Profile............press 1
    Update Profile..........press 2
    Search Inventory........press 3
    Update Inventory........press 4
    Print Inventory.........press 5
    Car Loan................press 6
    Exit....................press 7

    cin >> choice

    if choice is not between 0-7, set choice to 8.

    Previous idea did not work.
    But I did look it up and found a method that works by clearing the cin input and ignoring the rest.

    return choice
}


void searchInventory()
{
    Search Menu:
    *******************************
    Search by name.........press 1
    Search by state.........press 2
    Search by quanity.......press 3
    Search by preference....press 4
    Search by rating........press 5
    Search by price.........press 6
    Return to main menu.....press 7

    User enters choice

    Then have a long if statement for each of the options.

    if choice == 1:
    {
        Enter name to search for:
        cin >> name_choice;
        for(int i = 0; i < 20; i++)
        {
            if (inventory[i].name == name_choice)
            {
                inventory[i].printSelf()
            }
        }
    }
    Repeat for 2-6
    else don't do anything.
}

void updateInventory()
{
    string choice_i;
    for i in inventory:
        print:
          (i) + inventory[i].printSelf

    user selectes choice by entering their chosen i value.

    Then prompt:
    Update state......press 0
    Update rating......press 1

    user enters choice_up;

    if choice_up == 0:
        prompt user to update state
    if choice_up == 1:
        prompt user to update rating.
}

void printInventory()
{
    for i in inventory
    {
        Append to Output: 
            Name: name
            State: state
            Price: ...
            Quantity: 
            MPG: 
            Rating: 
            newline
    }
    cout << "Succsesfully printed inventory report." 
}

void carLoan()
{

}